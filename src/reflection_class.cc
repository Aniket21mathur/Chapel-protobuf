#include <sstream>

#include <google/protobuf/compiler/code_generator.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/descriptor.pb.h>
#include <google/protobuf/io/printer.h>
#include <google/protobuf/io/zero_copy_stream.h>
#include <google/protobuf/stubs/strutil.h>

#include <reflection_class.hh>
#include <message.hh>

namespace chapel {

  ReflectionClassGenerator::ReflectionClassGenerator(const FileDescriptor* file)
      : file_(file) {
  }

  ReflectionClassGenerator::~ReflectionClassGenerator() {
  }

  void ReflectionClassGenerator::Generate(Printer* printer) {
    WriteIntroduction(printer);

    // write children: Messages
    if (file_->message_type_count() > 0) {
      printer->Print("// Messages\n");
      for (int i = 0; i < file_->message_type_count(); i++) {
        MessageGenerator messageGenerator(file_->message_type(i));
        messageGenerator.Generate(printer);
      }
    }

  }

  void ReflectionClassGenerator::WriteIntroduction(Printer* printer) {
    printer->Print(
      "/*\n"
      "   Generated by the protocol buffer compiler.  DO NOT EDIT!\n"
      "   source: $file_name$\n"
      "*/\n"
      "\n",
      "file_name", file_->name());
  }

}  // namespace chapel
